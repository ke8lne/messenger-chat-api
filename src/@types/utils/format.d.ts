export declare function formatDeltaReadReceipt(delta: Record<string, any>): {
    reader: any;
    time: any;
    threadID: string;
};
export declare function formatPostReaction(data: Record<string, any>): {
    viewer_feedback_reaction_info: any;
    supported_reactions: any;
    top_reactions: any;
    reaction_count: any;
};
export declare function formatMessage(threadID: string, data: Record<string, any>): {
    type: string;
    threadID: string;
    messageID: any;
    logMessageType: string;
    logMessageData: {
        name: any;
        attachmentID?: undefined;
        width?: undefined;
        height?: undefined;
        url?: undefined;
        theme_color?: undefined;
        theme_id?: undefined;
        theme_emoji?: undefined;
        gradient?: undefined;
        should_show_icon?: undefined;
        theme_name_with_subtitle?: undefined;
        thread_icon_url?: undefined;
        thread_icon?: undefined;
        nickname?: undefined;
        participant_id?: undefined;
        question_json?: undefined;
        event_type?: undefined;
        question_id?: undefined;
    };
    logMessageBody: any;
    timestamp: any;
    author: any;
    senderID?: undefined;
    body?: undefined;
    reactions?: undefined;
    attachments?: undefined;
    mentions?: undefined;
} | {
    type: string;
    threadID: string;
    messageID: any;
    logMessageType: string;
    logMessageData: {
        attachmentID: any;
        width: any;
        height: any;
        url: any;
        name?: undefined;
        theme_color?: undefined;
        theme_id?: undefined;
        theme_emoji?: undefined;
        gradient?: undefined;
        should_show_icon?: undefined;
        theme_name_with_subtitle?: undefined;
        thread_icon_url?: undefined;
        thread_icon?: undefined;
        nickname?: undefined;
        participant_id?: undefined;
        question_json?: undefined;
        event_type?: undefined;
        question_id?: undefined;
    };
    logMessageBody: any;
    timestamp: any;
    author: any;
    senderID?: undefined;
    body?: undefined;
    reactions?: undefined;
    attachments?: undefined;
    mentions?: undefined;
} | {
    type: string;
    threadID: string;
    messageID: any;
    logMessageType: string;
    logMessageData: {
        theme_color: string;
        theme_id: string;
        theme_emoji: any;
        gradient: any;
        should_show_icon: string;
        theme_name_with_subtitle: string;
    } | {
        theme_color: any;
        theme_id: any;
        theme_emoji: any;
        gradient: any;
        should_show_icon: any;
        theme_name_with_subtitle: any;
        name?: undefined;
        attachmentID?: undefined;
        width?: undefined;
        height?: undefined;
        url?: undefined;
        thread_icon_url?: undefined;
        thread_icon?: undefined;
        nickname?: undefined;
        participant_id?: undefined;
        question_json?: undefined;
        event_type?: undefined;
        question_id?: undefined;
    };
    logMessageBody: any;
    timestamp: any;
    author: any;
    senderID?: undefined;
    body?: undefined;
    reactions?: undefined;
    attachments?: undefined;
    mentions?: undefined;
} | {
    type: string;
    threadID: string;
    messageID: any;
    logMessageType: string;
    logMessageData: {
        thread_icon_url: string;
        thread_icon: any;
        name?: undefined;
        attachmentID?: undefined;
        width?: undefined;
        height?: undefined;
        url?: undefined;
        theme_color?: undefined;
        theme_id?: undefined;
        theme_emoji?: undefined;
        gradient?: undefined;
        should_show_icon?: undefined;
        theme_name_with_subtitle?: undefined;
        nickname?: undefined;
        participant_id?: undefined;
        question_json?: undefined;
        event_type?: undefined;
        question_id?: undefined;
    };
    logMessageBody: any;
    timestamp: any;
    author: any;
    senderID?: undefined;
    body?: undefined;
    reactions?: undefined;
    attachments?: undefined;
    mentions?: undefined;
} | {
    type: string;
    threadID: string;
    messageID: any;
    logMessageType: string;
    logMessageData: {
        nickname: any;
        participant_id: any;
        name?: undefined;
        attachmentID?: undefined;
        width?: undefined;
        height?: undefined;
        url?: undefined;
        theme_color?: undefined;
        theme_id?: undefined;
        theme_emoji?: undefined;
        gradient?: undefined;
        should_show_icon?: undefined;
        theme_name_with_subtitle?: undefined;
        thread_icon_url?: undefined;
        thread_icon?: undefined;
        question_json?: undefined;
        event_type?: undefined;
        question_id?: undefined;
    };
    logMessageBody: any;
    timestamp: any;
    author: any;
    senderID?: undefined;
    body?: undefined;
    reactions?: undefined;
    attachments?: undefined;
    mentions?: undefined;
} | {
    type: string;
    threadID: string;
    messageID: any;
    logMessageType: string;
    logMessageData: {
        question_json: string;
        event_type: any;
        question_id: any;
        name?: undefined;
        attachmentID?: undefined;
        width?: undefined;
        height?: undefined;
        url?: undefined;
        theme_color?: undefined;
        theme_id?: undefined;
        theme_emoji?: undefined;
        gradient?: undefined;
        should_show_icon?: undefined;
        theme_name_with_subtitle?: undefined;
        thread_icon_url?: undefined;
        thread_icon?: undefined;
        nickname?: undefined;
        participant_id?: undefined;
    };
    logMessageBody: any;
    timestamp: any;
    author: any;
    senderID?: undefined;
    body?: undefined;
    reactions?: undefined;
    attachments?: undefined;
    mentions?: undefined;
} | {
    senderID: any;
    body: any;
    threadID: string;
    messageID: any;
    reactions: any;
    attachments: any;
    mentions: any;
    timestamp: any;
    type?: undefined;
    logMessageType?: undefined;
    logMessageData?: undefined;
    logMessageBody?: undefined;
    author?: undefined;
};
export declare function formatID(id: string): string;
export declare function formatType(event: Record<string, any>): {
    isTyping: boolean;
    from: any;
    threadID: string;
    fromMobile: any;
    userID: any;
    type: string;
};
export declare function formatReadReceipt(event: Record<string, any>): {
    reader: any;
    time: any;
    threadID: string;
    type: string;
};
export declare function formatRead(event: Record<string, any>): {
    threadID: string;
    time: any;
    type: string;
};
export declare function formatProxyPresence(presence: Record<string, any>, userID: string): {
    type: string;
    timestamp: number;
    userID: string;
    statuses: any;
};
export declare function formatPresence(presence: Record<string, any>, userID: string): {
    type: string;
    timestamp: number;
    userID: string;
    statuses: any;
};
export declare function formatThread(data: Record<string, any>): {
    threadID: string;
    participants: any;
    participantIDs: any;
    name: any;
    nicknames: any;
    snippet: any;
    snippetAttachments: any;
    snippetSender: string;
    unreadCount: any;
    messageCount: any;
    imageSrc: any;
    timestamp: any;
    serverTimestamp: any;
    muteUntil: any;
    isCanonicalUser: any;
    isCanonical: any;
    isSubscribed: any;
    folder: any;
    isArchived: any;
    recipientsLoadable: any;
    hasEmailParticipant: any;
    readOnly: any;
    canReply: any;
    cannotReplyReason: any;
    lastMessageTimestamp: any;
    lastReadTimestamp: any;
    lastMessageType: any;
    emoji: any;
    color: any;
    adminIDs: any;
    threadType: any;
};
export declare function formatDeltaEvent(m: Record<string, any>): {
    event: any;
    threadID: string;
    logMessageType: any;
    logMessageData: any;
    logMessageBody: any;
    author: any;
};
export declare function formatDeltaMessage(m: Record<string, any>): {
    isReply: boolean;
    senderID: string;
    body: any;
    threadID: string;
    messageID: any;
    attachments: any;
    mentions: {};
    timestamp: any;
    isGroup: boolean;
};
